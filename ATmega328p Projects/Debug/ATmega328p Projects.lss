
ATmega328p Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000448  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000448  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6c  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000721  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000561  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000061b  00000000  00000000  000021eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  8e:	0c 94 22 02 	jmp	0x444	; 0x444 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <colorDot>:
	}
}

// LEDs are toggled in a line, only one LED is ON at a time
void colorDot() {
	for (int i = 0; i < 2; i++) {
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	1b c0       	rjmp	.+54     	; 0xd2 <colorDot+0x3c>
		PORTB |= (1<<i);
  9c:	45 b1       	in	r20, 0x05	; 5
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 2e       	mov	r0, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <colorDot+0x14>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <colorDot+0x10>
  ae:	94 2f       	mov	r25, r20
  b0:	98 2b       	or	r25, r24
  b2:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	51 ee       	ldi	r21, 0xE1	; 225
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	50 40       	sbci	r21, 0x00	; 0
  be:	60 40       	sbci	r22, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <colorDot+0x24>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <colorDot+0x2e>
  c4:	00 00       	nop
		_delay_ms(delay);
		PORTB &= ~(1<<i);
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	80 95       	com	r24
  ca:	89 23       	and	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
	}
}

// LEDs are toggled in a line, only one LED is ON at a time
void colorDot() {
	for (int i = 0; i < 2; i++) {
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	22 30       	cpi	r18, 0x02	; 2
  d4:	31 05       	cpc	r19, r1
  d6:	14 f3       	brlt	.-60     	; 0x9c <colorDot+0x6>
		PORTB |= (1<<i);
		_delay_ms(delay);
		PORTB &= ~(1<<i);
	}
	
	PORTD |= (1<<PORTD2);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	91 ee       	ldi	r25, 0xE1	; 225
  e2:	24 e0       	ldi	r18, 0x04	; 4
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	20 40       	sbci	r18, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <colorDot+0x4e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <colorDot+0x58>
  ee:	00 00       	nop
	_delay_ms(delay);
	PORTD &= ~(1<<PORTD2);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (1<<PORTB2);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	4f ef       	ldi	r20, 0xFF	; 255
  fe:	51 ee       	ldi	r21, 0xE1	; 225
 100:	64 e0       	ldi	r22, 0x04	; 4
 102:	41 50       	subi	r20, 0x01	; 1
 104:	50 40       	sbci	r21, 0x00	; 0
 106:	60 40       	sbci	r22, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <colorDot+0x6c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <colorDot+0x76>
 10c:	00 00       	nop
	_delay_ms(delay);
	PORTB &= ~(1<<PORTB2);
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	85 b9       	out	0x05, r24	; 5
	
	for (int i = 4; i < 8; i++) {
 114:	24 e0       	ldi	r18, 0x04	; 4
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	1b c0       	rjmp	.+54     	; 0x150 <colorDot+0xba>
		PORTD |= (1<<i);
 11a:	4b b1       	in	r20, 0x0b	; 11
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <colorDot+0x92>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <colorDot+0x8e>
 12c:	94 2f       	mov	r25, r20
 12e:	98 2b       	or	r25, r24
 130:	9b b9       	out	0x0b, r25	; 11
 132:	4f ef       	ldi	r20, 0xFF	; 255
 134:	51 ee       	ldi	r21, 0xE1	; 225
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	41 50       	subi	r20, 0x01	; 1
 13a:	50 40       	sbci	r21, 0x00	; 0
 13c:	60 40       	sbci	r22, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <colorDot+0xa2>
 140:	00 c0       	rjmp	.+0      	; 0x142 <colorDot+0xac>
 142:	00 00       	nop
		_delay_ms(delay);
		PORTD &= ~(1<<i);
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	80 95       	com	r24
 148:	89 23       	and	r24, r25
 14a:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (1<<PORTB2);
	_delay_ms(delay);
	PORTB &= ~(1<<PORTB2);
	
	for (int i = 4; i < 8; i++) {
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	28 30       	cpi	r18, 0x08	; 8
 152:	31 05       	cpc	r19, r1
 154:	14 f3       	brlt	.-60     	; 0x11a <colorDot+0x84>
		PORTD |= (1<<i);
		_delay_ms(delay);
		PORTD &= ~(1<<i);
	}
}
 156:	08 95       	ret

00000158 <colorTrail>:

// LEDs are toggled in a line, and stay ON until all LEDs are ON, and then all LEDs are turned off in a line
void colorTrail() {
	// Turn all colors on individually
	for (int i = 0; i < 2; i++) {
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	16 c0       	rjmp	.+44     	; 0x18a <colorTrail+0x32>
		PORTB |= (1<<i);
 15e:	45 b1       	in	r20, 0x05	; 5
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <colorTrail+0x14>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <colorTrail+0x10>
 170:	84 2b       	or	r24, r20
 172:	85 b9       	out	0x05, r24	; 5
 174:	4f ef       	ldi	r20, 0xFF	; 255
 176:	81 ee       	ldi	r24, 0xE1	; 225
 178:	94 e0       	ldi	r25, 0x04	; 4
 17a:	41 50       	subi	r20, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <colorTrail+0x22>
 182:	00 c0       	rjmp	.+0      	; 0x184 <colorTrail+0x2c>
 184:	00 00       	nop
}

// LEDs are toggled in a line, and stay ON until all LEDs are ON, and then all LEDs are turned off in a line
void colorTrail() {
	// Turn all colors on individually
	for (int i = 0; i < 2; i++) {
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	22 30       	cpi	r18, 0x02	; 2
 18c:	31 05       	cpc	r19, r1
 18e:	3c f3       	brlt	.-50     	; 0x15e <colorTrail+0x6>
		PORTB |= (1<<i);
		_delay_ms(delay);
	}
	
	PORTD |= (1<<PORTD2);
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	84 60       	ori	r24, 0x04	; 4
 194:	8b b9       	out	0x0b, r24	; 11
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	41 ee       	ldi	r20, 0xE1	; 225
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	40 40       	sbci	r20, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <colorTrail+0x44>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <colorTrail+0x4e>
 1a6:	00 00       	nop
	_delay_ms(delay);
	
	PORTB |= (1<<PORTB2);
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	84 60       	ori	r24, 0x04	; 4
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	9f ef       	ldi	r25, 0xFF	; 255
 1b0:	21 ee       	ldi	r18, 0xE1	; 225
 1b2:	44 e0       	ldi	r20, 0x04	; 4
 1b4:	91 50       	subi	r25, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	40 40       	sbci	r20, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <colorTrail+0x5c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <colorTrail+0x66>
 1be:	00 00       	nop
	_delay_ms(delay);
	
	for (int i = 4; i < 8; i++) {
 1c0:	24 e0       	ldi	r18, 0x04	; 4
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	16 c0       	rjmp	.+44     	; 0x1f2 <colorTrail+0x9a>
		PORTD |= (1<<i);
 1c6:	4b b1       	in	r20, 0x0b	; 11
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <colorTrail+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <colorTrail+0x78>
 1d8:	84 2b       	or	r24, r20
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	91 ee       	ldi	r25, 0xE1	; 225
 1e0:	44 e0       	ldi	r20, 0x04	; 4
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	40 40       	sbci	r20, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <colorTrail+0x8a>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <colorTrail+0x94>
 1ec:	00 00       	nop
	_delay_ms(delay);
	
	PORTB |= (1<<PORTB2);
	_delay_ms(delay);
	
	for (int i = 4; i < 8; i++) {
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	28 30       	cpi	r18, 0x08	; 8
 1f4:	31 05       	cpc	r19, r1
 1f6:	3c f3       	brlt	.-50     	; 0x1c6 <colorTrail+0x6e>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	17 c0       	rjmp	.+46     	; 0x22c <colorTrail+0xd4>
		_delay_ms(delay);
	}
	
	// Turn all colors off individually
	for (int i = 0; i < 2; i++) {
		PORTB &= ~(1<<i);
 1fe:	45 b1       	in	r20, 0x05	; 5
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <colorTrail+0xb4>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <colorTrail+0xb0>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	85 b9       	out	0x05, r24	; 5
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	91 ee       	ldi	r25, 0xE1	; 225
 21a:	44 e0       	ldi	r20, 0x04	; 4
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	40 40       	sbci	r20, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <colorTrail+0xc4>
 224:	00 c0       	rjmp	.+0      	; 0x226 <colorTrail+0xce>
 226:	00 00       	nop
		PORTD |= (1<<i);
		_delay_ms(delay);
	}
	
	// Turn all colors off individually
	for (int i = 0; i < 2; i++) {
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	3f 4f       	sbci	r19, 0xFF	; 255
 22c:	22 30       	cpi	r18, 0x02	; 2
 22e:	31 05       	cpc	r19, r1
 230:	34 f3       	brlt	.-52     	; 0x1fe <colorTrail+0xa6>
		PORTB &= ~(1<<i);
		_delay_ms(delay);
	}
	
	PORTD &= ~(1<<PORTD2);
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	8b b9       	out	0x0b, r24	; 11
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	91 ee       	ldi	r25, 0xE1	; 225
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	20 40       	sbci	r18, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <colorTrail+0xe6>
 246:	00 c0       	rjmp	.+0      	; 0x248 <colorTrail+0xf0>
 248:	00 00       	nop
	_delay_ms(delay);
	
	PORTB &= ~(1<<PORTB2);
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	85 b9       	out	0x05, r24	; 5
 250:	4f ef       	ldi	r20, 0xFF	; 255
 252:	81 ee       	ldi	r24, 0xE1	; 225
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	41 50       	subi	r20, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <colorTrail+0xfe>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <colorTrail+0x108>
 260:	00 00       	nop
	_delay_ms(delay);
	
	for (int i = 4; i < 8; i++) {
 262:	24 e0       	ldi	r18, 0x04	; 4
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	17 c0       	rjmp	.+46     	; 0x296 <colorTrail+0x13e>
		PORTD &= ~(1<<i);
 268:	4b b1       	in	r20, 0x0b	; 11
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 2e       	mov	r0, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <colorTrail+0x11e>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <colorTrail+0x11a>
 27a:	80 95       	com	r24
 27c:	84 23       	and	r24, r20
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	4f ef       	ldi	r20, 0xFF	; 255
 282:	81 ee       	ldi	r24, 0xE1	; 225
 284:	94 e0       	ldi	r25, 0x04	; 4
 286:	41 50       	subi	r20, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <colorTrail+0x12e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <colorTrail+0x138>
 290:	00 00       	nop
	_delay_ms(delay);
	
	PORTB &= ~(1<<PORTB2);
	_delay_ms(delay);
	
	for (int i = 4; i < 8; i++) {
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	28 30       	cpi	r18, 0x08	; 8
 298:	31 05       	cpc	r19, r1
 29a:	34 f3       	brlt	.-52     	; 0x268 <colorTrail+0x110>
		PORTD &= ~(1<<i);
		_delay_ms(delay);
	}
}
 29c:	08 95       	ret

0000029e <main>:
}

int main(void)
{
	
	DDRB |= 0b00000111; // Set all LED ports using port B to output
 29e:	84 b1       	in	r24, 0x04	; 4
 2a0:	87 60       	ori	r24, 0x07	; 7
 2a2:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11110100; // Set all LED ports using port D to output, interrupt INT1 to input, PD0 and PD1 are reserved for communication with host
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	84 6f       	ori	r24, 0xF4	; 244
 2a8:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= (1 << PORTD3); // Set port D3 to high, and since DDD3/INT1 is set to input, the pull-up resistor is activated
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= (0b10 << ISC10); // Set ISC11 to 1 and ISC10 to 0, this generates an interrupt request on the falling edge of INT1
 2b0:	e9 e6       	ldi	r30, 0x69	; 105
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	88 60       	ori	r24, 0x08	; 8
 2b8:	80 83       	st	Z, r24
	EIMSK = (1 << INT1); // Set INT1 to 1 in interrupt mask register (Enables interrupts on INT1)
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	8d bb       	out	0x1d, r24	; 29
	
	sei(); // Global interrupt enable
 2be:	78 94       	sei
	
	// counter used to switch between different modes (i.e. colorDot and colorTrial)
	// an unsigned int allows counter to go back to 0 when it overflows (to avoid undefined behavior with signed int overflow)
	unsigned int counter = 0;
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1)
	{
		switch (counter % numModes) { // Select what the LEDs do based on the counter
 2c4:	ce 01       	movw	r24, r28
 2c6:	81 70       	andi	r24, 0x01	; 1
 2c8:	99 27       	eor	r25, r25
 2ca:	c0 ff       	sbrs	r28, 0
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <main+0x36>
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	21 f0       	breq	.+8      	; 0x2da <main+0x3c>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <main+0x40>
			case 0:
			colorDot();
 2d4:	0e 94 4b 00 	call	0x96	; 0x96 <colorDot>
			break;
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <main+0x40>
			case 1:
			colorTrail();
 2da:	0e 94 ac 00 	call	0x158	; 0x158 <colorTrail>
			break;
		}
		counter++; // Increment counter to go to next mode
 2de:	21 96       	adiw	r28, 0x01	; 1
	}
 2e0:	f1 cf       	rjmp	.-30     	; 0x2c4 <main+0x26>

000002e2 <colorBlink>:
	}
}

// LEDs are blinked ON/OFF n number of times
void colorBlink(int n) {
	for (int i = 0; i < n; i++) {
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	78 c0       	rjmp	.+240    	; 0x3d8 <colorBlink+0xf6>
		// Turn all on
		for (int j = 0; j < 8; j++) {
			switch (j) {
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	d9 f0       	breq	.+54     	; 0x324 <colorBlink+0x42>
 2ee:	1c f4       	brge	.+6      	; 0x2f6 <colorBlink+0x14>
 2f0:	33 23       	and	r19, r19
 2f2:	44 f4       	brge	.+16     	; 0x304 <colorBlink+0x22>
 2f4:	22 c0       	rjmp	.+68     	; 0x33a <colorBlink+0x58>
 2f6:	23 30       	cpi	r18, 0x03	; 3
 2f8:	31 05       	cpc	r19, r1
 2fa:	81 f0       	breq	.+32     	; 0x31c <colorBlink+0x3a>
 2fc:	28 30       	cpi	r18, 0x08	; 8
 2fe:	31 05       	cpc	r19, r1
 300:	e4 f4       	brge	.+56     	; 0x33a <colorBlink+0x58>
 302:	10 c0       	rjmp	.+32     	; 0x324 <colorBlink+0x42>
				case 0: case 1:
				PORTB |= (1 << j);
 304:	e5 b1       	in	r30, 0x05	; 5
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <colorBlink+0x30>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <colorBlink+0x2c>
 316:	4e 2b       	or	r20, r30
 318:	45 b9       	out	0x05, r20	; 5
				break;
 31a:	0f c0       	rjmp	.+30     	; 0x33a <colorBlink+0x58>
				case 3:
				PORTB |= (1 << PORTB2);
 31c:	45 b1       	in	r20, 0x05	; 5
 31e:	44 60       	ori	r20, 0x04	; 4
 320:	45 b9       	out	0x05, r20	; 5
				break;
 322:	0b c0       	rjmp	.+22     	; 0x33a <colorBlink+0x58>
				case 2: case 4: case 5: case 6: case 7:
				PORTD |= (1 << j);
 324:	eb b1       	in	r30, 0x0b	; 11
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <colorBlink+0x50>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <colorBlink+0x4c>
 336:	4e 2b       	or	r20, r30
 338:	4b b9       	out	0x0b, r20	; 11

// LEDs are blinked ON/OFF n number of times
void colorBlink(int n) {
	for (int i = 0; i < n; i++) {
		// Turn all on
		for (int j = 0; j < 8; j++) {
 33a:	2f 5f       	subi	r18, 0xFF	; 255
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	02 c0       	rjmp	.+4      	; 0x344 <colorBlink+0x62>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	28 30       	cpi	r18, 0x08	; 8
 346:	31 05       	cpc	r19, r1
 348:	7c f2       	brlt	.-98     	; 0x2e8 <colorBlink+0x6>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	39 e6       	ldi	r19, 0x69	; 105
 34e:	48 e1       	ldi	r20, 0x18	; 24
 350:	21 50       	subi	r18, 0x01	; 1
 352:	30 40       	sbci	r19, 0x00	; 0
 354:	40 40       	sbci	r20, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <colorBlink+0x6e>
 358:	00 c0       	rjmp	.+0      	; 0x35a <colorBlink+0x78>
 35a:	00 00       	nop
				break;
			}
		}
		_delay_ms(500);
		// Turn all off
		for (int j = 0; j < 8; j++) {
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	2d c0       	rjmp	.+90     	; 0x3bc <colorBlink+0xda>
			switch (j) {
 362:	22 30       	cpi	r18, 0x02	; 2
 364:	31 05       	cpc	r19, r1
 366:	e1 f0       	breq	.+56     	; 0x3a0 <colorBlink+0xbe>
 368:	1c f4       	brge	.+6      	; 0x370 <colorBlink+0x8e>
 36a:	33 23       	and	r19, r19
 36c:	44 f4       	brge	.+16     	; 0x37e <colorBlink+0x9c>
 36e:	24 c0       	rjmp	.+72     	; 0x3b8 <colorBlink+0xd6>
 370:	23 30       	cpi	r18, 0x03	; 3
 372:	31 05       	cpc	r19, r1
 374:	89 f0       	breq	.+34     	; 0x398 <colorBlink+0xb6>
 376:	28 30       	cpi	r18, 0x08	; 8
 378:	31 05       	cpc	r19, r1
 37a:	f4 f4       	brge	.+60     	; 0x3b8 <colorBlink+0xd6>
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <colorBlink+0xbe>
				case 0: case 1:
				PORTB &= ~(1 << j);
 37e:	e5 b1       	in	r30, 0x05	; 5
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <colorBlink+0xaa>
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <colorBlink+0xa6>
 390:	40 95       	com	r20
 392:	4e 23       	and	r20, r30
 394:	45 b9       	out	0x05, r20	; 5
				break;
 396:	10 c0       	rjmp	.+32     	; 0x3b8 <colorBlink+0xd6>
				case 3:
				PORTB &= ~(1 << PORTB2);
 398:	45 b1       	in	r20, 0x05	; 5
 39a:	4b 7f       	andi	r20, 0xFB	; 251
 39c:	45 b9       	out	0x05, r20	; 5
				break;
 39e:	0c c0       	rjmp	.+24     	; 0x3b8 <colorBlink+0xd6>
				case 2: case 4: case 5: case 6: case 7:
				PORTD &= ~(1 << j);
 3a0:	eb b1       	in	r30, 0x0b	; 11
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	02 2e       	mov	r0, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <colorBlink+0xcc>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <colorBlink+0xc8>
 3b2:	40 95       	com	r20
 3b4:	4e 23       	and	r20, r30
 3b6:	4b b9       	out	0x0b, r20	; 11
				break;
			}
		}
		_delay_ms(500);
		// Turn all off
		for (int j = 0; j < 8; j++) {
 3b8:	2f 5f       	subi	r18, 0xFF	; 255
 3ba:	3f 4f       	sbci	r19, 0xFF	; 255
 3bc:	28 30       	cpi	r18, 0x08	; 8
 3be:	31 05       	cpc	r19, r1
 3c0:	84 f2       	brlt	.-96     	; 0x362 <colorBlink+0x80>
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	39 e6       	ldi	r19, 0x69	; 105
 3c6:	48 e1       	ldi	r20, 0x18	; 24
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	30 40       	sbci	r19, 0x00	; 0
 3cc:	40 40       	sbci	r20, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <colorBlink+0xe6>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <colorBlink+0xf0>
 3d2:	00 00       	nop
	}
}

// LEDs are blinked ON/OFF n number of times
void colorBlink(int n) {
	for (int i = 0; i < n; i++) {
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	68 17       	cp	r22, r24
 3da:	79 07       	cpc	r23, r25
 3dc:	0c f4       	brge	.+2      	; 0x3e0 <colorBlink+0xfe>
 3de:	b0 cf       	rjmp	.-160    	; 0x340 <colorBlink+0x5e>
				break;
			}
		}
		_delay_ms(500);
	}
}
 3e0:	08 95       	ret

000003e2 <__vector_2>:
// Used for the number of blinks when pressing the button
// Needs to be volatile since this value is modified in an interrupt (the compiler shouldn't try to predict blinkCount by this assignment statement)
volatile unsigned int blinkCount = 1;

// Handle interrupt
ISR(INT1_vect) {
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	cli(); // Disable interrupts when handling an interrupt (a button press)
 404:	f8 94       	cli
	colorBlink(blinkCount++);
 406:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 40a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40e:	9c 01       	movw	r18, r24
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 418:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 41c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <colorBlink>
	sei(); // Enable global interrupts when done
 420:	78 94       	sei
}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
